{"version":3,"sources":["components/ThreeScene.js","components/home.js","components/about.js","components/storyboard.js","components/contact.js","App.js","reportWebVitals.js","index.js"],"names":["ThreeScene","mountRef","useRef","mouse","x","y","useEffect","currentMount","current","scene","THREE","camera","window","innerWidth","innerHeight","renderer","antialias","alpha","setSize","appendChild","domElement","geometry","material","color","cube","add","position","z","onMouseMove","event","clientX","clientY","addEventListener","animate","requestAnimationFrame","rotation","Math","PI","render","handleResize","aspect","updateProjectionMatrix","removeEventListener","removeChild","React","createElement","ref","Home","darkMode","setDarkMode","useState","handleThemeChange","isDarkMode","document","body","classList","contains","style","backgroundColor","Event","dispatchEvent","className","onClick","toggleDarkMode","remove","Link","to","About","Storyboard","Contact","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.214f2cd8.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst ThreeScene = () => {\n  const mountRef = useRef(null);\n  const mouse = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    // set up the scene, camera, and renderer\n    const currentMount = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentMount.appendChild(renderer.domElement);\n\n    // add a cube\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0xd8b3ff }); // Light purple color\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    camera.position.z = 5;\n\n    // handle mouse movement\n    const onMouseMove = (event) => {\n      mouse.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n    window.addEventListener('mousemove', onMouseMove);\n\n    // loop the animation\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x = mouse.current.y * Math.PI;\n      cube.rotation.y = mouse.current.x * Math.PI;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // clean up on component unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', onMouseMove);\n      if (currentMount) {\n        currentMount.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n\n  return <div ref={mountRef} />;\n};\n\nexport default ThreeScene;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport ThreeScene from './ThreeScene';\nimport './home.css';\n\nconst Home = () => {\n  const [darkMode, setDarkMode] = useState(false);\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    if (darkMode) {\n      document.body.classList.remove('dark-mode');\n    } else {\n      document.body.classList.add('dark-mode');\n    }\n  };\n\n  useEffect(() => {\n    const handleThemeChange = () => {\n      const isDarkMode = document.body.classList.contains('dark-mode');\n      document.body.style.backgroundColor = isDarkMode ? '#282c34' : '#ffffff';\n      document.body.style.color = isDarkMode ? '#ffffff' : '#000000';\n    };\n    handleThemeChange(); // set initial theme\n    document.body.addEventListener('classChange', handleThemeChange);\n\n    return () => {\n      document.body.removeEventListener('classChange', handleThemeChange);\n    };\n  }, []);\n\n  useEffect(() => {\n    const event = new Event('classChange');\n    document.body.dispatchEvent(event);\n  }, [darkMode]);\n\n  return (\n    <div className=\"home\">\n      <button className=\"toggle-button\" onClick={toggleDarkMode}>\n        {darkMode ? 'Light Mode' : 'Dark Mode'}\n      </button>\n      <nav className=\"navigation\">\n        <Link to=\"/about\">About</Link>\n        <Link to=\"/storyboard\">Storyboard</Link>\n        <Link to=\"/contact\">Contact</Link>\n      </nav>\n      <div className=\"three-container\">\n        <ThreeScene />\n      </div>\n      <header className=\"home-header\">\n        <h1>welcome to my portfolio</h1>\n        <p>hi, i'm grace and i'm learning how to build a website</p>\n      </header>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <div>\n      <h1>about me</h1>\n      <p>this is the about page.</p>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Storyboard = () => {\n  return (\n    <div>\n      <h1>my storyboard</h1>\n      <p>this is the storyboard page.</p>\n    </div>\n  );\n};\n\nexport default Storyboard;\n","import React from 'react';\n\nconst Contact = () => {\n  return (\n    <div>\n      <h1>contact me</h1>\n      <p>this is the contact page.</p>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './components/home';\nimport About from './components/about';\nimport Storyboard from './components/storyboard';\nimport Contact from './components/contact';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/storyboard\" element={<Storyboard />} />\n          <Route path=\"/contact\" element={<Contact />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}